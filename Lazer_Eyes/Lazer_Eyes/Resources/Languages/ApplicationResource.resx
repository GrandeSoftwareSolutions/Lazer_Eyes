<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlertS" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="AnswerFive" xml:space="preserve">
    <value>The notifications are initially set to default. You can customize them by going to the Notifications page. You can change the intensity and volume of the sound. You can also adjust the intensity of vibration. Vibration and sound can also be turned off. You can choose to disable notifications for low light. </value>
  </data>
  <data name="AnswerFour" xml:space="preserve">
    <value>You can customize settings by going in the General page. You can choose the units you preffer for distance measurement, choose at what distance you want to be notified for an obsticle by setting a distance threshold.</value>
  </data>
  <data name="AnswerOne" xml:space="preserve">
    <value>We recommend you consult with a Orientation and Mobility specialist before use. The App requires you to point the camera in the direction you are walking and it will notify you of various objects in your path and their distance. </value>
  </data>
  <data name="AnswerSix" xml:space="preserve">
    <value>Lazer Eyes utilizes LIDAR and therefore you would need specific phone models such as iPhone 13 Pro, and Pro Max, along with the 5.0 generation iPad Pro.</value>
  </data>
  <data name="AnswerThree" xml:space="preserve">
    <value>By default you will hear sound, feel vibration and have visuals on the Main page of the App.</value>
  </data>
  <data name="AnswerTwo" xml:space="preserve">
    <value>You will recieve warnings about objects in your path and low light levels based on your Settings.</value>
  </data>
  <data name="Auditory" xml:space="preserve">
    <value>Auditory</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="Danger" xml:space="preserve">
    <value>Danger</value>
  </data>
  <data name="Default" xml:space="preserve">
    <value>Default</value>
  </data>
  <data name="DistanceT" xml:space="preserve">
    <value>Distance Threshold:</value>
  </data>
  <data name="DistanceU" xml:space="preserve">
    <value>Distance Units</value>
  </data>
  <data name="Feet" xml:space="preserve">
    <value>Feet</value>
  </data>
  <data name="General" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="GoodLight" xml:space="preserve">
    <value>Lighting Quality: Good</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="HelpLabel" xml:space="preserve">
    <value>Hello, have a question?</value>
  </data>
  <data name="Intensity" xml:space="preserve">
    <value>Intensity</value>
  </data>
  <data name="LowL" xml:space="preserve">
    <value>Low Light</value>
  </data>
  <data name="LowLThresh" xml:space="preserve">
    <value>Low Light Threshold (Lumens)</value>
  </data>
  <data name="Meters" xml:space="preserve">
    <value>Meters</value>
  </data>
  <data name="Notifications" xml:space="preserve">
    <value>Notifications</value>
  </data>
  <data name="PoorLight" xml:space="preserve">
    <value>Lighting Quality: Poor</value>
  </data>
  <data name="PrivacyAnswer" xml:space="preserve">
    <value>Lazer Eyes does not collect any Personal Information. We do not use any tracking software.</value>
  </data>
  <data name="PrivacyPolicy" xml:space="preserve">
    <value>Privacy Policy</value>
  </data>
  <data name="QuestionFive" xml:space="preserve">
    <value>Q: How do I customize the notifications I will receive?</value>
  </data>
  <data name="QuestionFour" xml:space="preserve">
    <value>Q: How do I customize settings?</value>
  </data>
  <data name="QuestionOne" xml:space="preserve">
    <value>Q: How do I use LazerEyes?</value>
  </data>
  <data name="QuestionSix" xml:space="preserve">
    <value>Q: What requirements do I need to use the functionalities of LazerEyes?</value>
  </data>
  <data name="QuestionThree" xml:space="preserve">
    <value>Q: What kind of notifications will I receive?</value>
  </data>
  <data name="QuestionTwo" xml:space="preserve">
    <value>Q: What kind of alerts will I get?</value>
  </data>
  <data name="Scan" xml:space="preserve">
    <value>Scanning...</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="Steps" xml:space="preserve">
    <value>Steps</value>
  </data>
  <data name="StrideL" xml:space="preserve">
    <value>Stride Length:</value>
  </data>
  <data name="DistInStrides" xml:space="preserve">
    <value>Measure Distance in Strides</value>
  </data>
  <data name="Units" xml:space="preserve">
    <value>Units</value>
  </data>
  <data name="Vibration" xml:space="preserve">
    <value>Vibration</value>
  </data>
  <data name="Volume" xml:space="preserve">
    <value>Volume</value>
  </data>
  <data name="Warnings" xml:space="preserve">
    <value>Warnings</value>
  </data>
</root>